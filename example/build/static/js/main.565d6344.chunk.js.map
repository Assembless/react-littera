{"version":3,"sources":["../../src/react/service.tsx","App.tsx","../../src/react/hooks.ts","../../src/core/translate.ts","index.tsx"],"names":["LitteraContext","locale","locales","setLocale","LitteraService","children","initialLocale","React","value","translations","Header","translated","service","translate","useLittera","useLitteraMethods","hello","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"kQASaA,EAAiB,wBAAoC,CAChEC,OADgE,QAEhEC,QAAS,CAFuD,SAGhEC,UAAW,eA2BAC,EAAiB,SAAC,G,MAC7BC,aACAC,kBACAJ,YAEA,EAA4BK,kCAC1BD,EAD0BC,EACTL,EADSK,MAA5B,SAAON,EAAP,KAAeE,EAAf,KAIA,OACE,wBAACH,EAAD,UAAyBQ,MAAO,CAAEP,OAAF,EAAUE,UAAV,EAAqBD,YADvD,ICpCIO,EAAe,CACnB,MAAS,CACP,MAAS,gBAEX,MAAS,CACP,MAAS,eAEX,MAAS,CACP,MAAS,uBAEX,MAAS,CACP,MAAS,gBAIPC,EAAS,WACb,IAAMC,EChBkB,cAIxB,IAAMC,EAAUL,qBAAhB,GAEA,OAAOA,iBCVgB,oCAGKE,EAHL,SDUHI,CAAS,QAAqBZ,EAArB,EAA+BW,EAArDL,SAAP,QDUmBO,CAAWL,GAC9B,ECP+B,WAC/B,IAAMG,EAAUL,qBAAhB,GAEA,OAAO,iBAAa,CAAEJ,UAAWS,EAAb,UAAgCX,OAAQW,EAAQX,SAApE,QDI8Bc,GAAtBd,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,UAmBhB,OAAO,6BACL,4BAAKQ,EAAWK,OAChB,4BAAQC,QAnBW,WACnB,OAAOhB,GACL,IAAK,QACHE,EAAU,SACV,MACF,IAAK,QACHA,EAAU,SACV,MACF,IAAK,QACHA,EAAU,SACV,MACF,IAAK,QACHA,EAAU,YAOd,qBAIWe,EAlDH,WACV,OAAO,kBAAC,EAAD,CAAgBhB,QAAS,CAAE,QAAS,QAAS,QAAS,UAC3D,kBAAC,EAAD,QGAJiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.565d6344.chunk.js","sourcesContent":["import * as React from 'react'\nimport { LitteraTranslated } from '../typings'\n\ntype LitteraContext = {\n  locale: string\n  locales: string[]\n  setLocale: (locale: string) => void\n}\n\nexport const LitteraContext = React.createContext<LitteraContext>({\n  locale: 'en_US',\n  locales: ['en_US'],\n  setLocale: () => {}\n})\n\ninterface LitteraServiceProps {\n  children: React.ReactNode\n  initialLocale?: string\n  locales: string[]\n  preset?: LitteraTranslated<any, any>\n}\n\n/**\n * Context Provider for Littera\n * @category React\n * @public\n * @param initialLocale Initial active locale.\n * @param preset Set of predefined translations.\n * @param setLocale Callback called when the locale changes.\n * @param pattern Locale pattern.\n * @example\n * // Setting up Littera provider.\n *\n * const App = () => {\n *    return <LitteraService locales={[\"en_US\", \"de_DE\"]}>\n *      ...\n *    </LitteraService>\n * }\n */\nexport const LitteraService = ({\n  children,\n  initialLocale,\n  locales\n}: LitteraServiceProps) => {\n  const [locale, setLocale] = React.useState(\n    initialLocale ?? locales[0] ?? 'en_US'\n  )\n\n  return (\n    <LitteraContext.Provider value={{ locale, setLocale, locales }}>\n      {children}\n    </LitteraContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { LitteraService, useLittera, useLitteraMethods } from '@assembless/react-littera'\n\nconst App = () => {\n  return <LitteraService locales={[ \"en_US\", \"de_DE\", \"pl_PL\", \"no_NO\" ]}>\n    <Header />\n  </LitteraService>\n}\n\n// ---\n\nconst translations = {\n  \"en_US\": {\n    \"hello\": \"Hello world!\"\n  },\n  \"de_DE\": {\n    \"hello\": \"Hallo Welt!\"\n  },\n  \"pl_PL\": {\n    \"hello\": \"Witaj Å›wiecie!\"\n  },\n  \"no_NO\": {\n    \"hello\": \"Hei verden!\"\n  }\n}\n\nconst Header = () => {\n  const translated = useLittera(translations)\n  const { locale, setLocale } = useLitteraMethods();\n\n  const switchLocale = () => {\n    switch(locale) {\n      case \"en_US\":\n        setLocale(\"de_DE\");\n        break;\n      case \"de_DE\":\n        setLocale(\"pl_PL\");\n        break;\n      case \"pl_PL\":\n        setLocale(\"no_NO\");\n        break;\n      case \"no_NO\":\n        setLocale(\"en_US\");\n        break;\n    }\n  }\n\n  return <div>\n    <h1>{translated.hello}</h1>\n    <button onClick={switchLocale}>Switch language</button>\n  </div>\n}\n\nexport default App\n","import * as React from 'react'\r\nimport { LitteraContext } from './service'\r\nimport { translate } from '..'\r\nimport { LitteraTranslated, LitteraTranslations } from '../typings'\r\n\r\n/**\r\n * @description React hook for translating a component.\r\n * @category React\r\n * @param translations\r\n * @param locale Optional locale to translate to. Defaults to the current locale.\r\n * @returns The translations object for the specified locale.\r\n */\r\nexport const useLittera = <T, K extends keyof T>(\r\n  translations: LitteraTranslations<T>,\r\n  locale?: string\r\n): LitteraTranslated<T, K> => {\r\n  const service = React.useContext(LitteraContext)\r\n\r\n  return React.useRef(translate<T, K>(translations, locale ?? service.locale))\r\n    .current\r\n}\r\n\r\nexport const useLitteraMethods = () => {\r\n  const service = React.useContext(LitteraContext)\r\n\r\n  return React.useRef({ setLocale: service.setLocale, locale: service.locale })\r\n    .current\r\n}\r\n","import { LitteraTranslated, LitteraTranslations } from '../typings'\r\n\r\n/**\r\n * Reduces a translations object, returning translations for the specified locale.\r\n * @category core\r\n * @param translations The translations object.\r\n * @param locale The locale to return.\r\n */\r\nexport const translate = <T, K extends keyof T>(\r\n  translations: LitteraTranslations<T>,\r\n  locale: string\r\n): LitteraTranslated<T, K> => translations[locale] ?? {}\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}