{"version":3,"file":"index.js","sources":["../src/core/translate.ts","../src/utils/helpers.ts","../src/react/hooks.ts","../src/react/service.tsx"],"sourcesContent":["import { LitteraTranslated, LitteraTranslations } from '../typings'\r\n\r\n/**\r\n * Reduces a translations object, returning translations for the specified locale.\r\n * @category core\r\n * @param translations The translations object.\r\n * @param locale The locale to return.\r\n */\r\nexport const translate = <T, K extends keyof T>(\r\n  translations: LitteraTranslations<T>,\r\n  locale: K\r\n): LitteraTranslated<T, K> => translations[locale]\r\n","import { LitteraTranslations } from '../typings'\r\n\r\n/**\r\n * Throws an error if the given locale is not contained in the list of locales.\r\n * @param locales The list of locales.\r\n * @param locale The locale to check.\r\n * @returns True if the locale is contained, throw error otherwise.\r\n */\r\nexport const throwInvalidLocale = (locales: string[], locale: string) => {\r\n  if (!locales.includes(locale))\r\n    throw new Error(\r\n      `Invalid locale provided. Expected [${locales.join(', ')}], got ${locale}`\r\n    )\r\n\r\n  return true\r\n}\r\n\r\n/**\r\n * Compares translations for each locale and warns about missing.\r\n * Disabled for 'production' environment.\r\n * @param translations The translations object.\r\n */\r\nexport const warnMissingTranslations = <T>(\r\n  translations: LitteraTranslations<T>\r\n) => {\r\n  if (process.env.NODE_ENV === 'production') return\r\n\r\n  const keys: string[] = []\r\n  Object.keys(translations).forEach((locale) => {\r\n    Object.keys(translations[locale]).forEach((key) => {\r\n      if (!keys.includes(key)) keys.push(key)\r\n    })\r\n\r\n    keys.forEach((key) => {\r\n      // console.warn if key is missing in a locale.\r\n      if (!Object.keys(translations[locale]).includes(key)) {\r\n        console.warn(`Key ${key} is missing in locale ${locale}`)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Simple object check.\r\n * @param item\r\n * @returns {boolean}\r\n */\r\nexport function isObject(item: any) {\r\n  return item && typeof item === 'object' && !Array.isArray(item)\r\n}\r\n\r\n/**\r\n * Deep merge two objects.\r\n * @param target\r\n * @param ...sources\r\n */\r\nexport function deepMerge(target: any, ...sources: any[]): any {\r\n  if (!sources.length) return target\r\n  const source = sources.shift()\r\n\r\n  if (isObject(target) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!target[key]) Object.assign(target, { [key]: {} })\r\n        deepMerge(target[key], source[key])\r\n      } else {\r\n        Object.assign(target, { [key]: source[key] })\r\n      }\r\n    }\r\n  }\r\n\r\n  return deepMerge(target, ...sources)\r\n}\r\n","import * as React from 'react'\r\nimport { translate } from '..'\r\nimport {\r\n  deepMerge,\r\n  throwInvalidLocale,\r\n  warnMissingTranslations\r\n} from '../utils/helpers'\r\nimport { LitteraContextValue, LitteraTranslations } from '../typings'\r\n\r\n/**\r\n * Method accepting translations object and returning a React hook.\r\n * @param translations\r\n * @returns A React hook used to retrieve the translations.\r\n * @example\r\n * const translations = {\r\n *  'en_US': {\r\n *    'hello': 'Hello',\r\n *    'world': 'World'\r\n *  },\r\n *  'fr_FR': {\r\n *    'hello': 'Bonjour',\r\n *    'world': 'Monde'\r\n *  }\r\n * };\r\n * const useLittera = makeTranslations(translations);\r\n *\r\n * const Component () => {\r\n *  const translated = useLittera();\r\n *\r\n *  return <div>\r\n *    <h1>{translated.hello}</h1>\r\n *    <h2>{translated.world}</h2>\r\n *  </div>\r\n * }\r\n */\r\nexport const makeTranslations =\r\n  <L, P>(LitteraContext: React.Context<LitteraContextValue<L, P>>) =>\r\n  <T, K extends keyof T>(translations: LitteraTranslations<T>) => {\r\n    warnMissingTranslations(translations)\r\n\r\n    return (locale?: K) => {\r\n      const service = React.useContext(LitteraContext)\r\n\r\n      const translationsWithPreset = React.useMemo(\r\n        () => deepMerge(service.preset, translations),\r\n        [service.locale]\r\n      ) as T\r\n\r\n      return useLittera<L, P>(LitteraContext)<T, K>(\r\n        translationsWithPreset,\r\n        locale\r\n      )\r\n    }\r\n  }\r\n\r\n/**\r\n * @description React hook for translating a component.\r\n * @category React\r\n * @param translations\r\n * @param locale Optional locale to translate to. Defaults to the current locale.\r\n * @returns The translations object for the specified locale.\r\n */\r\nexport const useLittera =\r\n  <L, P>(LitteraContext: React.Context<LitteraContextValue<L, P>>) =>\r\n  <T, K extends keyof T>(translations: LitteraTranslations<T>, locale?: K) => {\r\n    const service = React.useContext(LitteraContext)\r\n    const currentLocale = (locale ?? service.locale) as K\r\n\r\n    React.useEffect(() => {\r\n      if (locale)\r\n        throwInvalidLocale(\r\n          service.locales as unknown as string[],\r\n          locale as unknown as string\r\n        )\r\n    }, [locale])\r\n\r\n    return React.useMemo(\r\n      () => translate<T, K>(translations, currentLocale),\r\n      [currentLocale]\r\n    )\r\n  }\r\n\r\n/**\r\n * @description React hook exposing methods for current context.\r\n * @category React\r\n */\r\nexport const useLitteraMethods =\r\n  <L, P>(LitteraContext: React.Context<LitteraContextValue<L, P>>) =>\r\n  () => {\r\n    const { setLocale, locale, locales } = React.useContext(LitteraContext)\r\n\r\n    const handleLocaleChange = React.useCallback(\r\n      (nextLocale: string) => {\r\n        throwInvalidLocale(locales as unknown as string[], nextLocale)\r\n\r\n        setLocale(nextLocale)\r\n      },\r\n      [setLocale]\r\n    )\r\n\r\n    /*     const translateFn = <T, K extends keyof T>(\r\n      translations: LitteraTranslations<T>,\r\n      overrideLocale?: string\r\n    ) => {\r\n      const currentLocale = overrideLocale ?? locale ?? locales[0]\r\n\r\n      // @ts-ignore\r\n      return translate<T, K>(translations, currentLocale)\r\n    } */\r\n\r\n    return React.useMemo(\r\n      () => ({\r\n        setLocale: handleLocaleChange,\r\n        locale,\r\n        locales\r\n      }),\r\n      [locale]\r\n    )\r\n  }\r\n","import * as React from 'react'\r\nimport { makeTranslations, useLitteraMethods } from './hooks'\r\nimport { LitteraContextValue, LitteraTranslations } from '../typings'\r\n\r\nexport function createLittera<L extends ReadonlyArray<string>, P>(\r\n  locales: L,\r\n  preset: P\r\n) {\r\n  const context = React.createContext<LitteraContextValue<L, P>>({\r\n    locale: (locales[0] ?? 'en_US') as L[number],\r\n    locales: locales as L,\r\n    setLocale: () => {},\r\n    // translate: <T extends {[key in L]: T[key]}, K extends keyof T>(\r\n    //   translations: LitteraTranslations<T>,\r\n    //   locale: K\r\n    // ) => translate<T, K >(translations, locale ?? 'en_US'),\r\n    preset\r\n  })\r\n\r\n  return {\r\n    LitteraContext: context,\r\n    LitteraService: ({ children, initialLocale }: any) => (\r\n      <LitteraService<L, P>\r\n        initialLocale={initialLocale}\r\n        preset={preset}\r\n        locales={locales}\r\n        Context={context}\r\n      >\r\n        {children}\r\n      </LitteraService>\r\n    ),\r\n    makeTranslations:\r\n      <T, Tp extends T & P, TpK extends keyof Tp>(translations: {\r\n        [key in keyof T]: T[key]\r\n      }) =>\r\n      (\r\n        locale?: keyof TpK\r\n      ): {\r\n        [key in keyof Tp[TpK]]: Tp[TpK][key]\r\n      } =>\r\n        // @ts-ignore\r\n        makeTranslations<L, P>(context)<Tp, TpK>(translations)(locale),\r\n    useLitteraMethods: useLitteraMethods<L, P>(context)\r\n  }\r\n}\r\n\r\n// export const LitteraContext = React.createContext<LitteraContextValue<any>>({\r\n//   locale: 'en_US',\r\n//   locales: ['en_US'],\r\n//   setLocale: () => {},\r\n//   translate: <T, K extends keyof T>(\r\n//     translations: LitteraTranslations<T>,\r\n//     locale?: string\r\n//   ) => translate<T, K>(translations, locale ?? 'en_US'),\r\n//   preset: {}\r\n// })\r\n\r\n/**\r\n * Context Provider for Littera\r\n * @category React\r\n * @public\r\n * @param initialLocale Initial active locale.\r\n * @param preset Set of predefined translations.\r\n * @param setLocale Callback called when the locale changes.\r\n * @param pattern Locale pattern.\r\n * @example\r\n * // Setting up Littera provider.\r\n *\r\n * const App = () => {\r\n *    return <LitteraService locales={[\"en_US\", \"de_DE\"]}>\r\n *      ...\r\n *    </LitteraService>\r\n * }\r\n */\r\nexport const LitteraService = function <L extends ReadonlyArray<unknown>, P>({\r\n  children,\r\n  initialLocale,\r\n  locales,\r\n  preset,\r\n  Context\r\n}: {\r\n  children: any\r\n  initialLocale: L[number]\r\n  locales: L\r\n  preset: LitteraTranslations<P>\r\n  Context: React.Context<LitteraContextValue<L, P>>\r\n}) {\r\n  const [locale, setLocale] = React.useState(\r\n    initialLocale ?? locales[0] ?? 'en_US'\r\n  )\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        locale,\r\n        setLocale,\r\n        locales,\r\n        // translate: <T, K extends keyof T>(\r\n        //   translations: LitteraTranslations<T>,\r\n        //   locale?: string\r\n        // ) => translate<T, K>(translations, locale ?? 'en_US'),\r\n        preset: preset ?? {}\r\n      }}\r\n    >\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n"],"names":["translate","translations","locale","throwInvalidLocale","locales","includes","Error","join","warnMissingTranslations","process","env","NODE_ENV","keys","Object","forEach","key","push","console","warn","isObject","item","Array","isArray","deepMerge","target","sources","length","source","shift","assign","makeTranslations","LitteraContext","service","React","translationsWithPreset","preset","useLittera","currentLocale","useLitteraMethods","setLocale","handleLocaleChange","nextLocale","createLittera","context","LitteraService","children","initialLocale","Context","Provider","value"],"mappings":";;IAQaA,SAAS,GAAG,SAAZA,SAAY,CACvBC,YADuB,EAEvBC,MAFuB;AAAA,SAGKD,YAAY,CAACC,MAAD,CAHjB;AAAA;;ACAlB,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAoBF,MAApB;AAChC,MAAI,CAACE,OAAO,CAACC,QAAR,CAAiBH,MAAjB,CAAL,EACE,MAAM,IAAII,KAAJ,yCACkCF,OAAO,CAACG,IAAR,CAAa,IAAb,CADlC,eAC8DL,MAD9D,CAAN;AAIF,SAAO,IAAP;AACD,CAPM;AAcP,AAAO,IAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,CACrCP,YADqC;AAGrC,MAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAE3C,MAAMC,IAAI,GAAa,EAAvB;AACAC,EAAAA,MAAM,CAACD,IAAP,CAAYX,YAAZ,EAA0Ba,OAA1B,CAAkC,UAACZ,MAAD;AAChCW,IAAAA,MAAM,CAACD,IAAP,CAAYX,YAAY,CAACC,MAAD,CAAxB,EAAkCY,OAAlC,CAA0C,UAACC,GAAD;AACxC,UAAI,CAACH,IAAI,CAACP,QAAL,CAAcU,GAAd,CAAL,EAAyBH,IAAI,CAACI,IAAL,CAAUD,GAAV;AAC1B,KAFD;AAIAH,IAAAA,IAAI,CAACE,OAAL,CAAa,UAACC,GAAD;AAEX,UAAI,CAACF,MAAM,CAACD,IAAP,CAAYX,YAAY,CAACC,MAAD,CAAxB,EAAkCG,QAAlC,CAA2CU,GAA3C,CAAL,EAAsD;AACpDE,QAAAA,OAAO,CAACC,IAAR,UAAoBH,GAApB,8BAAgDb,MAAhD;AACD;AACF,KALD;AAMD,GAXD;AAYD,CAlBM;AAyBP,SAAgBiB,SAASC;AACvB,SAAOA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoC,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAA5C;AACD;AAOD,SAAgBG,UAAUC;oCAAgBC;AAAAA,IAAAA;;;AACxC,MAAI,CAACA,OAAO,CAACC,MAAb,EAAqB,OAAOF,MAAP;AACrB,MAAMG,MAAM,GAAGF,OAAO,CAACG,KAAR,EAAf;;AAEA,MAAIT,QAAQ,CAACK,MAAD,CAAR,IAAoBL,QAAQ,CAACQ,MAAD,CAAhC,EAA0C;AACxC,SAAK,IAAMZ,GAAX,IAAkBY,MAAlB,EAA0B;AACxB,UAAIR,QAAQ,CAACQ,MAAM,CAACZ,GAAD,CAAP,CAAZ,EAA2B;AAAA;;AACzB,YAAI,CAACS,MAAM,CAACT,GAAD,CAAX,EAAkBF,MAAM,CAACgB,MAAP,CAAcL,MAAd,uCAAyBT,GAAzB,IAA+B,EAA/B;AAClBQ,QAAAA,SAAS,CAACC,MAAM,CAACT,GAAD,CAAP,EAAcY,MAAM,CAACZ,GAAD,CAApB,CAAT;AACD,OAHD,MAGO;AAAA;;AACLF,QAAAA,MAAM,CAACgB,MAAP,CAAcL,MAAd,yCAAyBT,GAAzB,IAA+BY,MAAM,CAACZ,GAAD,CAArC;AACD;AACF;AACF;;AAED,SAAOQ,SAAS,MAAT,UAAUC,MAAV,SAAqBC,OAArB,EAAP;AACD;;ACrCM,IAAMK,gBAAgB,GAC3B,SADWA,gBACX,CAAOC,cAAP;AAAA,SACA,UAAuB9B,YAAvB;AACEO,IAAAA,uBAAuB,CAACP,YAAD,CAAvB;AAEA,WAAO,UAACC,MAAD;AACL,UAAM8B,OAAO,GAAGC,gBAAA,CAAiBF,cAAjB,CAAhB;AAEA,UAAMG,sBAAsB,GAAGD,aAAA,CAC7B;AAAA,eAAMV,SAAS,CAACS,OAAO,CAACG,MAAT,EAAiBlC,YAAjB,CAAf;AAAA,OAD6B,EAE7B,CAAC+B,OAAO,CAAC9B,MAAT,CAF6B,CAA/B;AAKA,aAAOkC,UAAU,CAAOL,cAAP,CAAV,CACLG,sBADK,EAELhC,MAFK,CAAP;AAID,KAZD;AAaD,GAjBD;AAAA,CADK;AA2BP,AAAO,IAAMkC,UAAU,GACrB,SADWA,UACX,CAAOL,cAAP;AAAA,SACA,UAAuB9B,YAAvB,EAA6DC,MAA7D;AACE,QAAM8B,OAAO,GAAGC,gBAAA,CAAiBF,cAAjB,CAAhB;AACA,QAAMM,aAAa,GAAInC,MAAJ,WAAIA,MAAJ,GAAc8B,OAAO,CAAC9B,MAAzC;AAEA+B,IAAAA,eAAA,CAAgB;AACd,UAAI/B,MAAJ,EACEC,kBAAkB,CAChB6B,OAAO,CAAC5B,OADQ,EAEhBF,MAFgB,CAAlB;AAIH,KAND,EAMG,CAACA,MAAD,CANH;AAQA,WAAO+B,aAAA,CACL;AAAA,aAAMjC,SAAS,CAAOC,YAAP,EAAqBoC,aAArB,CAAf;AAAA,KADK,EAEL,CAACA,aAAD,CAFK,CAAP;AAID,GAjBD;AAAA,CADK;AAwBP,AAAO,IAAMC,iBAAiB,GAC5B,SADWA,iBACX,CAAOP,cAAP;AAAA,SACA;AACE,4BAAuCE,gBAAA,CAAiBF,cAAjB,CAAvC;AAAA,QAAQQ,SAAR,qBAAQA,SAAR;AAAA,QAAmBrC,MAAnB,qBAAmBA,MAAnB;AAAA,QAA2BE,OAA3B,qBAA2BA,OAA3B;;AAEA,QAAMoC,kBAAkB,GAAGP,iBAAA,CACzB,UAACQ,UAAD;AACEtC,MAAAA,kBAAkB,CAACC,OAAD,EAAiCqC,UAAjC,CAAlB;AAEAF,MAAAA,SAAS,CAACE,UAAD,CAAT;AACD,KALwB,EAMzB,CAACF,SAAD,CANyB,CAA3B;AAmBA,WAAON,aAAA,CACL;AAAA,aAAO;AACLM,QAAAA,SAAS,EAAEC,kBADN;AAELtC,QAAAA,MAAM,EAANA,MAFK;AAGLE,QAAAA,OAAO,EAAPA;AAHK,OAAP;AAAA,KADK,EAML,CAACF,MAAD,CANK,CAAP;AAQD,GA/BD;AAAA,CADK;;SClFSwC,cACdtC,SACA+B;;;AAEA,MAAMQ,OAAO,GAAGV,mBAAA,CAA+C;AAC7D/B,IAAAA,MAAM,eAAGE,OAAO,CAAC,CAAD,CAAV,wBAAiB,OADsC;AAE7DA,IAAAA,OAAO,EAAEA,OAFoD;AAG7DmC,IAAAA,SAAS,EAAE,uBAHkD;AAQ7DJ,IAAAA,MAAM,EAANA;AAR6D,GAA/C,CAAhB;AAWA,SAAO;AACLJ,IAAAA,cAAc,EAAEY,OADX;AAELC,IAAAA,cAAc,EAAE;AAAA,UAAGC,QAAH,QAAGA,QAAH;AAAA,UAAaC,aAAb,QAAaA,aAAb;AAAA,aACdb,mBAAA,CAACW,eAAD;AACEE,QAAAA,aAAa,EAAEA;AACfX,QAAAA,MAAM,EAAEA;AACR/B,QAAAA,OAAO,EAAEA;AACT2C,QAAAA,OAAO,EAAEJ;OAJX,EAMGE,QANH,CADc;AAAA,KAFX;AAYLf,IAAAA,gBAAgB,EACd,4BAA4C7B,YAA5C;AAAA,aAGA,UACEC,MADF;AAAA,eAME4B,gBAAgB,CAAOa,OAAP,CAAhB,CAAyC1C,YAAzC,EAAuDC,MAAvD,CANF;AAAA,OAHA;AAAA,KAbG;AAuBLoC,IAAAA,iBAAiB,EAAEA,iBAAiB,CAAOK,OAAP;AAvB/B,GAAP;AAyBD;;AA8BM,IAAMC,eAAc,GAAG,SAAjBA,eAAiB;;;MAC5BC,iBAAAA;MACAC,sBAAAA;MACA1C,gBAAAA;MACA+B,eAAAA;MACAY,gBAAAA;;AAQA,wBAA4Bd,cAAA,UAC1Ba,aAD0B,WAC1BA,aAD0B,GACT1C,OAAO,CAAC,CAAD,CADE,oBACK,OADL,CAA5B;AAAA,MAAOF,MAAP;AAAA,MAAeqC,SAAf;;AAIA,SACEN,mBAAA,CAACc,OAAO,CAACC,QAAT;AACEC,IAAAA,KAAK,EAAE;AACL/C,MAAAA,MAAM,EAANA,MADK;AAELqC,MAAAA,SAAS,EAATA,SAFK;AAGLnC,MAAAA,OAAO,EAAPA,OAHK;AAQL+B,MAAAA,MAAM,EAAEA,MAAF,WAAEA,MAAF,GAAY;AARb;GADT,EAYGU,QAZH,CADF;AAgBD,CAjCM;;;;;"}